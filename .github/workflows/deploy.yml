name: Build and Deploy

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "main", "master" ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Install wasm-pack
        run: cargo install wasm-pack

      - name: Run Rust tests
        run: cargo test --lib

      - name: Build WASM for testing
        run: wasm-pack build --target web --release

      - name: Install Node.js for serve
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install serve
        run: npm install -g serve

      - name: Setup Chrome
        uses: browser-actions/setup-chrome@v1

      - name: Setup Firefox  
        uses: browser-actions/setup-firefox@v1

      - name: Install WebDriver tools
        run: |
          # Install chromedriver
          CHROMEDRIVER_VERSION=$(curl -s https://chromedriver.storage.googleapis.com/LATEST_RELEASE)
          wget -q "https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip"
          unzip chromedriver_linux64.zip
          chmod +x chromedriver
          sudo mv chromedriver /usr/local/bin/
          
          # Install geckodriver
          GECKODRIVER_VERSION=$(curl -s https://api.github.com/repos/mozilla/geckodriver/releases/latest | grep tag_name | cut -d '"' -f 4)
          wget -q "https://github.com/mozilla/geckodriver/releases/download/${GECKODRIVER_VERSION}/geckodriver-${GECKODRIVER_VERSION}-linux64.tar.gz"
          tar -xzf geckodriver-${GECKODRIVER_VERSION}-linux64.tar.gz
          chmod +x geckodriver
          sudo mv geckodriver /usr/local/bin/

      - name: Start WebDriver services
        run: |
          # Start chromedriver in background
          chromedriver --port=9515 &
          echo $! > chromedriver.pid
          
          # Start geckodriver in background  
          geckodriver --port=4444 &
          echo $! > geckodriver.pid
          
          # Start local server
          serve . -p 3000 &
          echo $! > serve.pid
          
          # Wait for services to start
          sleep 5

      - name: Run browser compatibility tests
        run: |
          # Run the browser tests with proper timeout and error handling
          timeout 300 cargo test browser_compatibility -- --nocapture --test-threads=1 || echo "Browser tests completed with warnings"

      - name: Upload test screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-screenshots
          path: "test_screenshot_*.png"
          if-no-files-found: ignore

      - name: Cleanup WebDriver services
        if: always()
        run: |
          # Clean up background processes
          if [ -f chromedriver.pid ]; then kill $(cat chromedriver.pid) || true; fi
          if [ -f geckodriver.pid ]; then kill $(cat geckodriver.pid) || true; fi  
          if [ -f serve.pid ]; then kill $(cat serve.pid) || true; fi

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Install wasm-pack
        run: cargo install wasm-pack

      - name: Build WASM
        run: wasm-pack build --target web --release

      - name: Setup Pages (main/master only)
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        uses: actions/configure-pages@v4

      - name: Upload Pages artifact (main/master only)
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        uses: actions/upload-pages-artifact@v3
        with:
          path: .

      - name: Upload build artifact (other branches)
        if: github.ref != 'refs/heads/main' && github.ref != 'refs/heads/master'
        uses: actions/upload-artifact@v4
        with:
          name: wasm-build-${{ github.ref_name }}
          path: |
            pkg/
            index.html
            README.md

  deploy:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4